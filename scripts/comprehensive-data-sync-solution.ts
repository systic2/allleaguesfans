import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_SERVICE_ROLE;
const apiKey = process.env.API_FOOTBALL_KEY;

if (!supabaseUrl || !supabaseKey || !apiKey) {
  console.error('Missing environment variables');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

interface PlayerStatusAnalysis {
  active: number;
  transferred: number;
  retired: number;
  newPlayers: number;
  jerseyChanges: number;
  teamChanges: number;
}

interface SyncRecommendation {
  immediate: string[];
  daily: string[];
  weekly: string[];
  monthly: string[];
}

async function fetchAPIFootballData(endpoint: string) {
  try {
    const response = await fetch(`https://v3.football.api-sports.io/${endpoint}`, {
      headers: {
        'x-apisports-key': apiKey!,
        'x-apisports-host': 'v3.football.api-sports.io'
      }
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error(`‚ùå API Error for ${endpoint}:`, error);
    return null;
  }
}

async function analyzePlayerStatus(): Promise<PlayerStatusAnalysis> {
  console.log('üîç ÏÑ†Ïàò ÏÉÅÌÉú Î≥ÄÌôî Î∂ÑÏÑù...\n');

  // 1. ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ†Ïàò ÌòÑÌô©
  const { data: dbPlayers } = await supabase
    .from('players')
    .select('id, name, team_id, jersey_number, position, api_player_id')
    .eq('team_id', 2762); // Ï†ÑÎ∂Å ÌòÑÎåÄ Î™®ÌÑ∞Ïä§ ÏÉòÌîå

  console.log(`üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ†Ïàò Ïàò: ${dbPlayers?.length || 0}Î™Ö`);

  // 2. API-Football ÌòÑÏû¨ Ïä§ÏøºÎìú
  const squadData = await fetchAPIFootballData('players/squads?team=2762');
  const apiPlayers = squadData?.response?.[0]?.players || [];
  
  console.log(`üåê API-Football Ïä§ÏøºÎìú: ${apiPlayers.length}Î™Ö`);

  // 3. ÏÉÅÌÉú Î∂ÑÏÑù
  let active = 0;
  let transferred = 0;
  const retired = 0;
  let newPlayers = 0;
  const jerseyChanges = 0;
  const teamChanges = 0;

  // DBÏóê ÏûàÏßÄÎßå APIÏóê ÏóÜÎäî ÏÑ†Ïàò (Ïù¥Ï†Å/ÏùÄÌá¥)
  const missingFromAPI = dbPlayers?.filter(dbPlayer => 
    !apiPlayers.some((apiPlayer: any) => apiPlayer.id === dbPlayer.api_player_id)
  ) || [];

  // APIÏóê ÏûàÏßÄÎßå DBÏóê ÏóÜÎäî ÏÑ†Ïàò (Ïã†Í∑ú ÏòÅÏûÖ)
  const missingFromDB = apiPlayers.filter((apiPlayer: any) => 
    !dbPlayers?.some(dbPlayer => dbPlayer.api_player_id === apiPlayer.id)
  );

  transferred = missingFromAPI.length;
  newPlayers = missingFromDB.length;
  active = (dbPlayers?.length || 0) - transferred;

  console.log(`\nüìà ÏÉÅÌÉú Î∂ÑÏÑù Í≤∞Í≥º:`);
  console.log(`  ‚úÖ ÌòÑÏû¨ ÌôúÎèô: ${active}Î™Ö`);
  console.log(`  üîÑ Ïù¥Ï†Å/Î∞©Ï∂ú: ${transferred}Î™Ö`);
  console.log(`  üÜï Ïã†Í∑ú ÏòÅÏûÖ: ${newPlayers}Î™Ö`);
  console.log(`  ‚ö†Ô∏è ÏÉÅÌÉú Î∂àÎ™Ö: ${retired}Î™Ö`);

  if (missingFromAPI.length > 0) {
    console.log(`\nüîç Ïù¥Ï†Å/Î∞©Ï∂ú Í∞ÄÎä•ÏÑ± ÎÜíÏùÄ ÏÑ†ÏàòÎì§:`);
    missingFromAPI.slice(0, 5).forEach(player => {
      console.log(`  ‚ùì ${player.name} (#${player.jersey_number || 'N/A'})`);
    });
  }

  if (missingFromDB.length > 0) {
    console.log(`\nüÜï Ïã†Í∑ú ÏòÅÏûÖ Í∞ÄÎä•ÏÑ± ÎÜíÏùÄ ÏÑ†ÏàòÎì§:`);
    missingFromDB.slice(0, 5).forEach((player: any) => {
      console.log(`  ‚≠ê ${player.name} (#${player.number || 'N/A'})`);
    });
  }

  return {
    active,
    transferred,
    retired,
    newPlayers,
    jerseyChanges,
    teamChanges
  };
}

async function generateSyncStrategy(): Promise<SyncRecommendation> {
  console.log('\nüéØ Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ï†ÑÎûµ ÏàòÎ¶Ω...\n');

  // ÌòÑÏû¨ ÏãúÏä§ÌÖú Î∂ÑÏÑù
  const { data: lastUpdate } = await supabase
    .from('players')
    .select('updated_at')
    .not('updated_at', 'is', null)
    .order('updated_at', { ascending: false })
    .limit(1);

  const daysSinceUpdate = lastUpdate?.[0] 
    ? Math.floor((Date.now() - new Date(lastUpdate[0].updated_at).getTime()) / (1000 * 60 * 60 * 24))
    : 999;

  console.log(`üìÖ ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: ${daysSinceUpdate}Ïùº Ï†Ñ`);

  // Î¶¨Í∑∏ ÏùºÏ†ï ÌôïÏù∏
  const fixturesData = await fetchAPIFootballData('fixtures?league=292&season=2025&next=5');
  const upcomingMatches = fixturesData?.response?.length || 0;
  
  console.log(`‚öΩ Îã§Í∞ÄÏò§Îäî Í≤ΩÍ∏∞: ${upcomingMatches}Í≤ΩÍ∏∞`);

  return {
    immediate: [
      'üö® Ïã§ÏãúÍ∞Ñ ÎùºÏù∏ÏóÖ Í≤ÄÏ¶ù ÏãúÏä§ÌÖú Íµ¨Ï∂ï',
      'üìä Îì±Î≤àÌò∏ Î∂àÏùºÏπò ÏÑ†Ïàò Ï¶âÏãú ÏàòÏ†ï',
      'üîÑ Ïù¥Ï†ÅÏãúÏû• ÌôúÏÑ±Í∏∞ Ï£ºÍ∞Ñ Î™®ÎãàÌÑ∞ÎßÅ (1Ïõî, 7Ïõî)',
      '‚ö° Í≤ΩÍ∏∞Ïùº ÎùºÏù∏ÏóÖ Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî'
    ],
    daily: [
      'üìà ÏÑ†Ïàò ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏ (ÎìùÏ†ê, ÎèÑÏõÄ, Ïπ¥Îìú)',
      'üè• Î∂ÄÏÉÅÏûê Î™ÖÎã® ÎèôÍ∏∞Ìôî',
      'üìã ÎùºÏù∏ÏóÖ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Î∞òÏòÅ',
      'üîç Ïã†Í∑ú ÏÑ†Ïàò Îì±Î°ù Î™®ÎãàÌÑ∞ÎßÅ'
    ],
    weekly: [
      'üë• Ï†ÑÏ≤¥ Ïä§ÏøºÎìú Í≤ÄÏ¶ù Î∞è ÎèôÍ∏∞Ìôî',
      'üî¢ Îì±Î≤àÌò∏ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏùºÍ¥Ñ ÏóÖÎç∞Ïù¥Ìä∏',
      'üìä Îç∞Ïù¥ÌÑ∞ ÌíàÏßà Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±',
      'üéØ ÏÑ±Í≥º ÏßÄÌëú Î™®ÎãàÌÑ∞ÎßÅ (Ï†ïÌôïÎèÑ, ÏôÑÏÑ±ÎèÑ)'
    ],
    monthly: [
      'üèóÔ∏è Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞ ÏµúÏ†ÅÌôî',
      'üì± ÏÇ¨Ïö©Ïûê Ï†úÎ≥¥ ÏãúÏä§ÌÖú Î∂ÑÏÑù',
      'üîÑ API Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÎåÄÏùë',
      'üìã Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Ìó¨Ïä§Ï≤¥ÌÅ¨'
    ]
  };
}

async function designAutomationSystem() {
  console.log('\nü§ñ ÏûêÎèôÌôî ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ...\n');

  const automationBlueprint = {
    realTimeSync: {
      name: 'Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî ÏóîÏßÑ',
      triggers: [
        'Í≤ΩÍ∏∞ ÏãúÏûë 1ÏãúÍ∞Ñ Ï†Ñ',
        'ÎùºÏù∏ÏóÖ Î∞úÌëú ÏãúÏ†ê',
        'ÏÑ†Ïàò ÍµêÏ≤¥ Î∞úÏÉùÏãú',
        'Í≤ΩÍ∏∞ Ï¢ÖÎ£å ÌõÑ'
      ],
      actions: [
        'API-Football ÎùºÏù∏ÏóÖ Ï°∞Ìöå',
        'DB Îì±Î≤àÌò∏/Ìè¨ÏßÄÏÖò Í≤ÄÏ¶ù',
        'Î∂àÏùºÏπò Ìï≠Î™© ÏûêÎèô ÏàòÏ†ï',
        'Í¥ÄÎ¶¨Ïûê ÏïåÎ¶º Î∞úÏÜ°'
      ]
    },
    transferDetection: {
      name: 'Ïù¥Ï†Å Í∞êÏßÄ ÏãúÏä§ÌÖú',
      triggers: [
        'ÏùºÏùº Ïä§ÏøºÎìú Î≥ÄÌôî Í∞êÏßÄ',
        'Ïù¥Ï†ÅÏãúÏû• Í∞úÎ∞©Í∏∞ (1Ïõî, 7Ïõî)',
        'ÏÑ†Ïàò Ïû•Í∏∞Í∞Ñ ÎØ∏Ï∂úÏ†ÑÏãú',
        'ÏÉàÎ°úÏö¥ ÏÑ†Ïàò ID Í∞êÏßÄ'
      ],
      actions: [
        'Ïù¥Ï†Å/Î∞©Ï∂ú ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï',
        'Ïã†Í∑ú ÏÑ†Ïàò ÏûêÎèô Îì±Î°ù',
        'ÌåÄ Î°úÏä§ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏',
        'ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ ÏïÑÏπ¥Ïù¥Î∏å'
      ]
    },
    qualityMonitoring: {
      name: 'Îç∞Ïù¥ÌÑ∞ ÌíàÏßà Î™®ÎãàÌÑ∞ÎßÅ',
      metrics: [
        'Îì±Î≤àÌò∏ Ï†ïÌôïÎèÑ (Î™©Ìëú: 95%+)',
        'ÏÑ†Ïàò Ï†ïÎ≥¥ ÏôÑÏÑ±ÎèÑ (Î™©Ìëú: 90%+)',
        'Ïã§ÏãúÍ∞ÑÏÑ± (Î™©Ìëú: 1ÏãúÍ∞Ñ Ïù¥ÎÇ¥)',
        'ÏÇ¨Ïö©Ïûê ÎßåÏ°±ÎèÑ (Ï†úÎ≥¥ Í±¥Ïàò Í∏∞Ï§Ä)'
      ],
      alerts: [
        'Ï†ïÌôïÎèÑ 90% ÎØ∏ÎßåÏãú Ï¶âÏãú ÏïåÎ¶º',
        'ÎåÄÎüâ Îç∞Ïù¥ÌÑ∞ Î∂àÏùºÏπò Í∞êÏßÄ',
        'API Ïû•Ïï† ÏÉÅÌô© ÎåÄÏùë',
        'ÏÑ±Îä• ÏûÑÍ≥ÑÏπò Ï¥àÍ≥ºÏãú'
      ]
    }
  };

  console.log('üìã ÏûêÎèôÌôî ÏãúÏä§ÌÖú Íµ¨ÏÑ±ÏöîÏÜå:');
  Object.entries(automationBlueprint).forEach(([key, system]) => {
    console.log(`\nüîß ${system.name}:`);
    if ('triggers' in system) {
      console.log(`  ‚ö° Ìä∏Î¶¨Í±∞: ${system.triggers.length}Í∞ú`);
      console.log(`  üìä Ïï°ÏÖò: ${system.actions.length}Í∞ú`);
    }
    if ('metrics' in system) {
      console.log(`  üìà ÏßÄÌëú: ${system.metrics.length}Í∞ú`);
      console.log(`  üö® ÏïåÎ¶º: ${system.alerts.length}Í∞ú`);
    }
  });

  return automationBlueprint;
}

async function calculateROI() {
  console.log('\nüí∞ Ìà¨Ïûê ÎåÄÎπÑ Ìö®Í≥º Î∂ÑÏÑù...\n');

  const currentIssues = {
    manualUpdates: 2, // Ï£ºÍ∞Ñ ÏàòÎèô ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ (ÏãúÍ∞Ñ)
    userComplaints: 5, // ÏõîÍ∞Ñ ÏÇ¨Ïö©Ïûê Ï†úÎ≥¥ Í±¥Ïàò
    dataAccuracy: 93.1, // ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ Ï†ïÌôïÎèÑ (%)
    updateDelay: 24 // ÌèâÍ∑† ÏóÖÎç∞Ïù¥Ìä∏ ÏßÄÏó∞ (ÏãúÍ∞Ñ)
  };

  const projectedImprovements = {
    automationSavings: 8, // ÏõîÍ∞Ñ Ï†àÏïΩ ÏãúÍ∞Ñ (ÏãúÍ∞Ñ)
    accuracyIncrease: 5.9, // Ï†ïÌôïÎèÑ Ìñ•ÏÉÅ (% Ìè¨Ïù∏Ìä∏)
    userSatisfaction: 80, // ÏÇ¨Ïö©Ïûê Ï†úÎ≥¥ Í∞êÏÜå (%)
    realtimeSync: 95 // Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî Îã¨ÏÑ±Ïú® (%)
  };

  console.log('üìä ÌòÑÏû¨ ÏÉÅÌô©:');
  console.log(`  ‚è±Ô∏è Ï£ºÍ∞Ñ ÏàòÎèô ÏûëÏóÖ: ${currentIssues.manualUpdates}ÏãúÍ∞Ñ`);
  console.log(`  üìû ÏõîÍ∞Ñ ÏÇ¨Ïö©Ïûê Ï†úÎ≥¥: ${currentIssues.userComplaints}Í±¥`);
  console.log(`  üéØ Îç∞Ïù¥ÌÑ∞ Ï†ïÌôïÎèÑ: ${currentIssues.dataAccuracy}%`);
  console.log(`  ‚è∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏßÄÏó∞: ${currentIssues.updateDelay}ÏãúÍ∞Ñ`);

  console.log('\nüéØ Í∞úÏÑ† Î™©Ìëú:');
  console.log(`  ‚ö° ÏûêÎèôÌôî Ï†àÏïΩ: ${projectedImprovements.automationSavings}ÏãúÍ∞Ñ/Ïõî`);
  console.log(`  üìà Ï†ïÌôïÎèÑ Ìñ•ÏÉÅ: +${projectedImprovements.accuracyIncrease}% ‚Üí ${currentIssues.dataAccuracy + projectedImprovements.accuracyIncrease}%`);
  console.log(`  üòä ÏÇ¨Ïö©Ïûê ÎßåÏ°±: ${projectedImprovements.userSatisfaction}% Ï†úÎ≥¥ Í∞êÏÜå`);
  console.log(`  üîÑ Ïã§ÏãúÍ∞Ñ ÎèôÍ∏∞Ìôî: ${projectedImprovements.realtimeSync}% Îã¨ÏÑ±`);

  const totalBenefit = (
    projectedImprovements.automationSavings * 12 + // Ïó∞Í∞Ñ ÏãúÍ∞Ñ Ï†àÏïΩ
    projectedImprovements.accuracyIncrease * 10 + // Ï†ïÌôïÎèÑ Í∞ÄÏπò
    projectedImprovements.userSatisfaction * 2 // ÏÇ¨Ïö©Ïûê ÎßåÏ°±ÎèÑ Í∞ÄÏπò
  );

  console.log(`\nüí° Ïó∞Í∞Ñ ÏòàÏÉÅ Ìö®Í≥º: ${totalBenefit.toFixed(1)}Ï†ê (Ï¢ÖÌï© ÏßÄÏàò)`);
}

async function comprehensiveDataSyncSolution() {
  console.log('üöÄ Ï¢ÖÌï© Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏÜîÎ£®ÏÖò Î∂ÑÏÑù\n');
  console.log('================================================================\n');

  // 1. ÏÑ†Ïàò ÏÉÅÌÉú Î∂ÑÏÑù
  const statusAnalysis = await analyzePlayerStatus();

  // 2. ÎèôÍ∏∞Ìôî Ï†ÑÎûµ
  const syncStrategy = await generateSyncStrategy();

  // 3. ÏûêÎèôÌôî ÏãúÏä§ÌÖú ÏÑ§Í≥Ñ
  const automation = await designAutomationSystem();

  // 4. ROI Î∂ÑÏÑù
  await calculateROI();

  // 5. Ïã§Ìñâ Í≥ÑÌöç
  console.log('\nüìã Ïã§Ìñâ Î°úÎìúÎßµ\n');
  console.log('================================================================');

  console.log('\nüéØ Phase 1: Ï¶âÏãú Ïã§Ìñâ (1-2Ï£º)');
  syncStrategy.immediate.forEach(item => console.log(`  ${item}`));

  console.log('\nüìÖ Phase 2: Ï†ïÍ∏∞ Ïö¥ÏòÅ (ÏßÑÌñâÏ§ë)');
  console.log('  ÏùºÏùº:');
  syncStrategy.daily.forEach(item => console.log(`    ${item}`));
  console.log('  Ï£ºÍ∞Ñ:');
  syncStrategy.weekly.forEach(item => console.log(`    ${item}`));

  console.log('\nüîÆ Phase 3: Ïû•Í∏∞ ÏµúÏ†ÅÌôî (3-6Í∞úÏõî)');
  syncStrategy.monthly.forEach(item => console.log(`  ${item}`));

  console.log('\nüí° ÌïµÏã¨ Í∞úÏÑ†ÏÇ¨Ìï≠:');
  console.log('  1. üéØ Îì±Î≤àÌò∏ Ï†ïÌôïÎèÑ: 93.1% ‚Üí 98%+ (Î™©Ìëú)');
  console.log('  2. ‚ö° Ïã§ÏãúÍ∞ÑÏÑ±: 24ÏãúÍ∞Ñ ÏßÄÏó∞ ‚Üí 1ÏãúÍ∞Ñ Ïù¥ÎÇ¥');
  console.log('  3. ü§ñ ÏûêÎèôÌôîÏú®: ÏàòÎèô ÏûëÏóÖ ‚Üí 80% ÏûêÎèôÌôî');
  console.log('  4. üìä Îç∞Ïù¥ÌÑ∞ ÏôÑÏÑ±ÎèÑ: ÌòÑÏû¨ 75% ‚Üí 90%+');
  console.log('  5. üë• ÏÇ¨Ïö©Ïûê ÎßåÏ°±ÎèÑ: Ï†úÎ≥¥ Í±¥Ïàò 80% Í∞êÏÜå');

  console.log('\nüîß Í∏∞Ïà†Ï†Å Íµ¨ÌòÑ Ïö∞ÏÑ†ÏàúÏúÑ:');
  console.log('  1. üö® Ïã§ÏãúÍ∞Ñ ÎùºÏù∏ÏóÖ Í≤ÄÏ¶ù API Í∞úÎ∞ú');
  console.log('  2. üìä Îì±Î≤àÌò∏ Î∂àÏùºÏπò ÏûêÎèô ÏàòÏ†ï Ïä§ÌÅ¨Î¶ΩÌä∏');
  console.log('  3. üîÑ Ïù¥Ï†Å Í∞êÏßÄ Î∞è ÏïåÎ¶º ÏãúÏä§ÌÖú');
  console.log('  4. üìà Îç∞Ïù¥ÌÑ∞ ÌíàÏßà ÎåÄÏãúÎ≥¥Îìú Íµ¨Ï∂ï');
  console.log('  5. ü§ñ GitHub Actions ÏûêÎèôÌôî ÌôïÏû•');

  console.log('\n‚úÖ ÏòàÏÉÅ Í≤∞Í≥º:');
  console.log('  ‚û§ Ïã§Ï†ú Í≤ΩÍ∏∞ Îì±Î≤àÌò∏ÏôÄ 98%+ ÏùºÏπò');
  console.log('  ‚û§ ÌòÑÏû¨ ÏÜåÏÜçÌåÄ Ï†ïÎ≥¥ Ïã§ÏãúÍ∞Ñ Ï†ïÌôïÏÑ±');
  console.log('  ‚û§ ÏùÄÌá¥/Ïù¥Ï†Å/ÏûÑÎåÄ ÏÉÅÌÉú ÏûêÎèô Ï∂îÏ†Å');
  console.log('  ‚û§ ÏÇ¨Ïö©Ïûê Í≤ΩÌóò ÎåÄÌè≠ Í∞úÏÑ†');
  console.log('  ‚û§ Í¥ÄÎ¶¨ Î∂ÄÎã¥ 80% Í∞êÏÜå');

  console.log('\n================================================================');
  console.log('üéâ Î∂ÑÏÑù ÏôÑÎ£å: Ïã§Ìñâ Í∞ÄÎä•Ìïú Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî ÏÜîÎ£®ÏÖò Ï†úÏïà');
  console.log('================================================================');
}

comprehensiveDataSyncSolution().catch(console.error);